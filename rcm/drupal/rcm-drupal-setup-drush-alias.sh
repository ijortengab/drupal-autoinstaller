#!/bin/bash

# Common Functions.
red() { echo -ne "\e[91m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
green() { echo -ne "\e[92m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
yellow() { echo -ne "\e[93m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
blue() { echo -ne "\e[94m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
magenta() { echo -ne "\e[95m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
error() { echo -n "$INDENT" >&2; red '#' "$@" >&2; echo >&2; }
success() { echo -n "$INDENT" >&2; green '#' "$@" >&2; echo >&2; }
chapter() { echo -n "$INDENT" >&2; yellow '#' "$@" >&2; echo >&2; }
title() { echo -n "$INDENT" >&2; blue '#' "$@" >&2; echo >&2; }
code() { echo -n "$INDENT" >&2; magenta "$@" >&2; echo >&2; }
x() { echo >&2; exit 1; }
e() { echo -n "$INDENT" >&2; echo -n "$@" >&2; }
_() { echo -n "$INDENT" >&2; echo -n "#"' ' >&2; [ -n "$1" ] && echo -n "$@" >&2; }
_,() { echo -n "$@" >&2; }
_.() { echo >&2; }
__() { echo -n "$INDENT" >&2; echo -n "# ${RCM_INDENT}" >&2; [ -n "$1" ] && echo "$@" >&2; }
____() { echo >&2; [ -n "$RCM_DELAY" ] && sleep "$RCM_DELAY"; }

# Parse arguments. Generated by parse-options.sh.
_new_arguments=()
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help) help=1; shift ;;
        --version) version=1; shift ;;
        --fast) fast=1; shift ;;
        --project-name=*) project_name="${1#*=}"; shift ;;
        --project-name) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then project_name="$2"; shift; fi; shift ;;
        --project-parent-name=*) project_parent_name="${1#*=}"; shift ;;
        --project-parent-name) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then project_parent_name="$2"; shift; fi; shift ;;
        --url=*) url="${1#*=}"; shift ;;
        --url) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then url="$2"; shift; fi; shift ;;
        --[^-]*) shift ;;
        *) _new_arguments+=("$1"); shift ;;
    esac
done
set -- "${_new_arguments[@]}"
unset _new_arguments

# Define variables and constants.
[ -z "$fast" ] && fast="$RCM_FAST"; [ "$fast" == 0 ] && fast=
RCM_DELAY=${RCM_DELAY:=.5}; [ -n "$fast" ] && unset RCM_DELAY
RCM_INDENT='    '; [ "$(tput cols)" -le 80 ] && RCM_INDENT='  '
DRUPAL_PREFIX=${DRUPAL_PREFIX:=/usr/local/share/drupal}
DRUPAL_PROJECTS_DIRNAME=${DRUPAL_PROJECTS_DIRNAME:=projects}
DRUPAL_BINARY_DIRNAME=${DRUPAL_BINARY_DIRNAME:=bin}
DRUPAL_SITES_DIRNAME=${DRUPAL_SITES_DIRNAME:=sites}
BINARY_DIRECTORY=${BINARY_DIRECTORY:=[__DIR__]}
RCM_TLD_SPECIAL=${RCM_TLD_SPECIAL:=example test onion invalid local localhost alt}

# Functions.
printVersion() {
    echo '0.12.0'
}
printHelp() {
    title RCM Drupal Setup
    _ 'Variation '; yellow Drush Alias; _.
    _ 'Version '; yellow `printVersion`; _.
    _.
    cat << EOF
Usage: rcm-drupal-setup-drush-alias [options]

Options:
   --project-parent-name
        Set the project parent name.
   --project-name *
        Set the project name. This should be in machine name format.
   --url
        Set the additional URL.

Global Options.
   --fast
        No delay every subtask.
   --version
        Print version of this script.
   --help
        Show this help.

Environment Variables:
   BINARY_DIRECTORY
        Default to $BINARY_DIRECTORY
   DRUPAL_PREFIX
        Default to $DRUPAL_PREFIX
   DRUPAL_PROJECTS_DIRNAME
        Default to $DRUPAL_PROJECTS_DIRNAME
   DRUPAL_SITES_DIRNAME
        Default to $DRUPAL_SITES_DIRNAME
   DRUPAL_BINARY_DIRNAME
        Default to $DRUPAL_BINARY_DIRNAME
EOF
}

# Help and Version.
[ -n "$help" ] && { printHelp; exit 1; }
[ -n "$version" ] && { printVersion; exit 1; }

# Title.
title rcm-drupal-setup-drush-alias
____

[ "$EUID" -ne 0 ] && { error This script needs to be run with superuser privileges.; x; }

# Dependency.
while IFS= read -r line; do
    [[ -z "$line" ]] || command -v `cut -d: -f1 <<< "${line}"` >/dev/null || { error Unable to proceed, command not found: '`'`cut -d: -f1 <<< "${line}"`'`'.; x; }
done <<< `printHelp 2>/dev/null | sed -n '/^Dependency:/,$p' | sed -n '2,/^\s*$/p' | sed 's/^ *//g'`

# Functions.
ArraySearch() {
    local index match="$1"
    local source=("${!2}")
    for index in "${!source[@]}"; do
       if [[ "${source[$index]}" == "${match}" ]]; then
           _return=$index; return 0
       fi
    done
    return 1
}
resolve_relative_path() {
    if [ -d "$1" ];then
        cd "$1" || return 1
        pwd
    elif [ -e "$1" ];then
        if [ ! "${1%/*}" = "$1" ]; then
            cd "${1%/*}" || return 1
        fi
        echo "$(pwd)/${1##*/}"
    else
        return 1
    fi
}
fileMustExists() {
    # global used:
    # global modified:
    # function used: __, success, error, x
    if [ -f "$1" ];then
        __; green File '`'$(basename "$1")'`' ditemukan.; _.
    else
        __; red File '`'$(basename "$1")'`' tidak ditemukan.; x
    fi
}
isFileExists() {
    # global used:
    # global modified: found, notfound
    # function used: __
    if [[ -f "$1" && ! -s "$1" ]];then
        __ Empty file detected.
        __; magenta rm "$1"; _.
        rm "$1"
    fi
    found=
    notfound=
    if [ -f "$1" ];then
        __ File '`'$(basename "$1")'`' ditemukan.
        found=1
    else
        __ File '`'$(basename "$1")'`' tidak ditemukan.
        notfound=1
    fi
}
dirMustExists() {
    # global used:
    # global modified:
    # function used: __, success, error, x
    if [ -d "$1" ];then
        __; green Direktori '`'$(basename "$1")'`' ditemukan.; _.
    else
        __; red Direktori '`'$(basename "$1")'`' tidak ditemukan.; x
    fi
}
isDirExists() {
    # global used:
    # global modified: found, notfound
    # function used: __
    found=
    notfound=
    if [ -d "$1" ];then
        __ Direktori '`'$(basename "$1")'`' ditemukan.
        found=1
    else
        __ Direktori '`'$(basename "$1")'`' tidak ditemukan.
        notfound=1
    fi
}
vercomp() {
    # https://www.google.com/search?q=bash+compare+version
    # https://stackoverflow.com/a/4025065
    if [[ $1 == $2 ]]; then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)); do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++)); do
        if [[ -z ${ver2[i]} ]];then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]})); then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]})); then
            return 2
        fi
    done
    return 0
}
url2Filename() {
    local url=$1 filename
    # Contoh 1:
    # uri=juragan.web.id:10001/cintakita/dot/com/sso
    # filename=juragan.web.id.10001-cintakita.dot.com.sso
    # Contoh 2:
    # uri=http://juragan.web.id:10001/cintakita/dot/com/sso/
    # filename=http.juragan.web.id.10001-cintakita.dot.com.sso
    # Contoh 3:
    # uri=https://juragan.web.id:10001/cintakita/dot/com/sso/
    # filename=juragan.web.id.10001-cintakita.dot.com.sso
    filename="${url}"
    filename="${filename/https:\/\//}"
    filename="${filename/http:\/\//http.}"
    filename="${filename/:/.}"
    filename="${filename/\//-}"
    filename="${filename//\//.}"
    echo "$filename"
}
Rcm_parse_url() {
    # Reset
    PHP_URL_SCHEME=
    PHP_URL_HOST=
    PHP_URL_PORT=
    PHP_URL_USER=
    PHP_URL_PASS=
    PHP_URL_PATH=
    PHP_URL_QUERY=
    PHP_URL_FRAGMENT=
    PHP_URL_SCHEME="$(echo "$1" | grep :// | sed -e's,^\(.*\)://.*,\1,g')"
    _PHP_URL_SCHEME_SLASH="${PHP_URL_SCHEME}://"
    _PHP_URL_SCHEME_REVERSE="$(echo ${1/${_PHP_URL_SCHEME_SLASH}/})"
    if grep -q '#' <<< "$_PHP_URL_SCHEME_REVERSE";then
        PHP_URL_FRAGMENT=$(echo $_PHP_URL_SCHEME_REVERSE | cut -d# -f2)
        _PHP_URL_SCHEME_REVERSE=$(echo $_PHP_URL_SCHEME_REVERSE | cut -d# -f1)
    fi
    if grep -q '\?' <<< "$_PHP_URL_SCHEME_REVERSE";then
        PHP_URL_QUERY=$(echo $_PHP_URL_SCHEME_REVERSE | cut -d? -f2)
        _PHP_URL_SCHEME_REVERSE=$(echo $_PHP_URL_SCHEME_REVERSE | cut -d? -f1)
    fi
    _PHP_URL_USER_PASS="$(echo $_PHP_URL_SCHEME_REVERSE | grep @ | cut -d@ -f1)"
    PHP_URL_PASS=`echo $_PHP_URL_USER_PASS | grep : | cut -d: -f2`
    if [ -n "$PHP_URL_PASS" ]; then
        PHP_URL_USER=`echo $_PHP_URL_USER_PASS | grep : | cut -d: -f1`
    else
        PHP_URL_USER=$_PHP_URL_USER_PASS
    fi
    _PHP_URL_HOST_PORT="$(echo ${_PHP_URL_SCHEME_REVERSE/$_PHP_URL_USER_PASS@/} | cut -d/ -f1)"
    PHP_URL_HOST="$(echo $_PHP_URL_HOST_PORT | sed -e 's,:.*,,g')"
    if grep -q -E ':[0-9]+$' <<< "$_PHP_URL_HOST_PORT";then
        PHP_URL_PORT="$(echo $_PHP_URL_HOST_PORT | sed -e 's,^.*:,:,g' -e 's,.*:\([0-9]*\).*,\1,g' -e 's,[^0-9],,g')"
    fi
    _PHP_URL_HOST_PORT_LENGTH=${#_PHP_URL_HOST_PORT}
    _LENGTH="$_PHP_URL_HOST_PORT_LENGTH"
    if [ -n "$_PHP_URL_USER_PASS" ];then
        _PHP_URL_USER_PASS_LENGTH=${#_PHP_URL_USER_PASS}
        _LENGTH=$((_LENGTH + 1 + _PHP_URL_USER_PASS_LENGTH))
    fi
    PHP_URL_PATH="${_PHP_URL_SCHEME_REVERSE:$_LENGTH}"

    # Debug
    # e '"$PHP_URL_SCHEME"' "$PHP_URL_SCHEME"; _.
    # e '"$PHP_URL_HOST"' "$PHP_URL_HOST"; _.
    # e '"$PHP_URL_PORT"' "$PHP_URL_PORT"; _.
    # e '"$PHP_URL_USER"' "$PHP_URL_USER"; _.
    # e '"$PHP_URL_PASS"' "$PHP_URL_PASS"; _.
    # e '"$PHP_URL_PATH"' "$PHP_URL_PATH"; _.
    # e '"$PHP_URL_QUERY"' "$PHP_URL_QUERY"; _.
    # e '"$PHP_URL_FRAGMENT"' "$PHP_URL_FRAGMENT"; _.
}
urlCompleteComponent() {
    local tld_special _url_port _tld _url_path_correct
    [[ $(type -t Rcm_parse_url) == function ]] || { error Function Rcm_parse_url not found.; x; }
    [[ $(type -t ArraySearch) == function ]] || { error Function ArraySearch not found.; x; }
    [[ -n "$url" ]] || { error Global variable url is not found or empty value.; x; }
    [[ -n "$RCM_TLD_SPECIAL" ]] || { error Global variable RCM_TLD_SPECIAL is not found or empty value.; x; }
    Rcm_parse_url "$url"
    if [ -z "$PHP_URL_HOST" ];then
        error Argument --url is not valid: '`'"$url"'`'.; x
    fi
    [ -n "$PHP_URL_SCHEME" ] && url_scheme="$PHP_URL_SCHEME" || url_scheme=https
    if [ -z "$PHP_URL_PORT" ];then
        case "$url_scheme" in
            http) url_port=80;;
            https) url_port=443;;
        esac
    else
        url_port="$PHP_URL_PORT"
    fi
    url_host="$PHP_URL_HOST"
    url_path="$PHP_URL_PATH"
    url_path_clean=
    url_path_clean_trailing=
    if [[ "$url_path" == '/' ]];then
        url_path=
    fi
    if [ -n "$url_path" ];then
        # Trim leading and trailing slash.
        url_path_clean=$(echo "$url_path" | sed -E 's|(^/+\|/+$)||g')
        url_path_clean_trailing=$(echo "$url_path" | sed -E 's|/+$||g')
        # Must leading with slash.
        # Karena akan digunakan pada nginx configuration.
        _url_path_correct="/${url_path_clean}"
        if [ ! "$url_path_clean_trailing" == "$_url_path_correct" ];then
            error "Argument --url-path not valid."; x
        fi
    fi
    _tld="${url_host##*.}"
    # Explode by space.
    read -ra tld_special -d '' <<< "$RCM_TLD_SPECIAL"
    is_tld_special=
    if ArraySearch "$_tld" tld_special[@];then
        # Paksa menjadi http.
        url_scheme=http
        if [ -z "$PHP_URL_PORT" ];then
            url_port=80
        fi
        is_tld_special=1
    fi
    _url_port=
    if [ -n "$url_port" ];then
        if [[ "$url_scheme" == https && "$url_port" == 443 ]];then
            _url_port=
        elif [[ "$url_scheme" == http && "$url_port" == 80 ]];then
            _url_port=
        else
            _url_port=":${url_port}"
        fi
    fi
    # Modify variable url, auto add scheme.
    # Modify variable url, auto trim trailing slash, auto add port.
    url="${url_scheme}://${url_host}${_url_port}${url_path_clean_trailing}"
}

# Require, validate, and populate value.
chapter Dump variable.
__FILE__=$(resolve_relative_path "$0")
__DIR__=$(dirname "$__FILE__")
code 'BINARY_DIRECTORY="'$BINARY_DIRECTORY'"'
find='[__DIR__]'
replace="$__DIR__"
BINARY_DIRECTORY="${BINARY_DIRECTORY/"$find"/"$replace"}"
code 'BINARY_DIRECTORY="'$BINARY_DIRECTORY'"'
if [ -z "$project_name" ];then
    error "Argument --project-name required."; x
fi
code 'url="'$url'"'
if [ -n "$url" ];then
    urlCompleteComponent
    code 'url="'$url'"'
    code 'url_scheme="'$url_scheme'"'
    code 'url_host="'$url_host'"'
    code 'url_port="'$url_port'"'
    code 'url_path="'$url_path'"'
    code 'url_path_clean="'$url_path_clean'"'
    code 'url_path_clean_trailing="'$url_path_clean_trailing'"'
fi
code 'project_name="'$project_name'"'
code 'project_parent_name="'$project_parent_name'"'
project_dir_basename="$project_name"
drupal_fqdn_localhost="$project_name".drupal.localhost
[ -n "$project_parent_name" ] && {
    drupal_fqdn_localhost="$project_name"."$project_parent_name".drupal.localhost
    project_dir_basename="$project_parent_name"
}
vercomp `stat --version | head -1 | grep -o -E '\S+$'` 8.31
if [[ $? -lt 2 ]];then
    stat_cached=' --cached=never'
else
    stat_cached=''
fi
code 'DRUPAL_PREFIX="'$DRUPAL_PREFIX'"'
code 'DRUPAL_PROJECTS_DIRNAME="'$DRUPAL_PROJECTS_DIRNAME'"'
code 'DRUPAL_BINARY_DIRNAME="'$DRUPAL_BINARY_DIRNAME'"'
code 'DRUPAL_SITES_DIRNAME="'$DRUPAL_SITES_DIRNAME'"'
print_version=`printVersion`
code 'print_version="'$print_version'"'
mktemp=
____

target_master="${DRUPAL_PREFIX}/${DRUPAL_BINARY_DIRNAME}"
chapter Mengecek direktori master binary '`'$target_master'`'.
isDirExists "$target_master"
____

if [ -n "$notfound" ];then
    chapter Membuat direktori master binary.
    code mkdir -p '"'$target_master'"'
    mkdir -p "$target_master"
    dirMustExists "$target_master"
    ____
fi

list_uri=("${drupal_fqdn_localhost}")
if [ -n "$url" ];then
    list_uri+=("$url")
fi

for uri in "${list_uri[@]}";do
    filename=$(url2Filename "$uri")
    chapter Script Shortcut ${filename}
    fullpath="${DRUPAL_PREFIX}/${DRUPAL_PROJECTS_DIRNAME}/${project_dir_basename}/${DRUPAL_SITES_DIRNAME}/${filename}"
    dirname="${DRUPAL_PREFIX}/${DRUPAL_PROJECTS_DIRNAME}/${project_dir_basename}/${DRUPAL_SITES_DIRNAME}"
    isFileExists "$fullpath"
    if [ -n "$found" ];then
        __ Cleaning variables.
        code DRUPAL_SITE_URL=
        code DRUPAL_SITE_CREATED=
        code DRUPAL_PROJECT_ROOT=
        code DRUPAL_PROJECT_NAME=
        code DRUPAL_PROJECT_PARENT_NAME=
        code RCM_DRUPAL_VERSION=
        DRUPAL_SITE_URL=
        DRUPAL_PROJECT_ROOT=
        DRUPAL_SITE_CREATED=
        DRUPAL_PROJECT_NAME=
        DRUPAL_PROJECT_PARENT_NAME=
        RCM_DRUPAL_VERSION=
        __ Load script.
        code source "$fullpath"
        source "$fullpath"
        old_version="$RCM_DRUPAL_VERSION"
        if [ -z "$DRUPAL_SITE_CREATED" ];then
            DRUPAL_SITE_CREATED=$(date +%s)
        fi
        if [ -z "$old_version" ];then
            __ Shell script perlu diupdate.
            found=
            notfound=1
        else
            if [[ "$old_version" =~ [^0-9\.]+ ]];then
                 old_version=0
            fi
            vercomp $print_version $old_version
            if [[ $? -eq 1 ]];then
                __ Site shell script perlu diupdate. Versi terbaru saat ini ${print_version}.
                found=
                notfound=1
            else
                __ Site shell script tidak perlu diupdate. Versi terbaru saat ini ${print_version}.
            fi
        fi
    fi
    if [ -n "$notfound" ];then
        __ Membuat file '`'"$fullpath"'`'.
        mkdir -p "$dirname"
        _target="${DRUPAL_PREFIX}/${DRUPAL_PROJECTS_DIRNAME}/${project_dir_basename}/drupal"
        _dereference=$(stat "$_target" -c %N)
        drupal_project_root=$(grep -Eo "' -> '.*'$" <<< "$_dereference" | sed -E "s/' -> '(.*)'$/\1/")
        touch "$fullpath"
        chmod a+x "$fullpath"
        cat << SHELLSCRIPT > "$fullpath"
DRUPAL_SITE_URL=$uri
DRUPAL_SITE_CREATED=$DRUPAL_SITE_CREATED
DRUPAL_PROJECT_ROOT=$drupal_project_root
DRUPAL_PROJECT_NAME=$project_name
DRUPAL_PROJECT_PARENT_NAME=$project_parent_name
RCM_DRUPAL_VERSION=$print_version
SHELLSCRIPT
        fileMustExists "$fullpath"
    fi
    ____

done

if [ -n "$mktemp" ];then
    rm "$mktemp"
fi

exit 0

# parse-options.sh \
# --without-end-options-double-dash \
# --compact \
# --clean \
# --no-hash-bang \
# --no-original-arguments \
# --no-error-invalid-options \
# --no-error-require-arguments << EOF | clip
# FLAG=(
# --fast
# --version
# --help
# )
# VALUE=(
# --project-name
# --project-parent-name
# --url
# )
# MULTIVALUE=(
# )
# FLAG_VALUE=(
# )
# EOF
# clear
