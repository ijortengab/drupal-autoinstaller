#!/bin/bash

# Parse arguments. Generated by parse-options.sh.
_new_arguments=()
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help) help=1; shift ;;
        --version) version=1; shift ;;
        --fast) fast=1; shift ;;
        --[^-]*) shift ;;
        *) _new_arguments+=("$1"); shift ;;
    esac
done
set -- "${_new_arguments[@]}"
unset _new_arguments

# Common Functions.
red() { echo -ne "\e[91m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
green() { echo -ne "\e[92m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
yellow() { echo -ne "\e[93m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
blue() { echo -ne "\e[94m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
magenta() { echo -ne "\e[95m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
error() { echo -n "$INDENT" >&2; red '#' "$@" >&2; echo >&2; }
success() { echo -n "$INDENT" >&2; green '#' "$@" >&2; echo >&2; }
chapter() { echo -n "$INDENT" >&2; yellow '#' "$@" >&2; echo >&2; }
title() { echo -n "$INDENT" >&2; blue '#' "$@" >&2; echo >&2; }
code() { echo -n "$INDENT" >&2; magenta "$@" >&2; echo >&2; }
x() { echo >&2; exit 1; }
e() { echo -n "$INDENT" >&2; echo -n "$@" >&2; }
_() { echo -n "$INDENT" >&2; echo -n "#"' ' >&2; [ -n "$1" ] && echo -n "$@" >&2; }
_,() { echo -n "$@" >&2; }
_.() { echo >&2; }
__() { echo -n "$INDENT" >&2; echo -n "# ${RCM_INDENT}" >&2; [ -n "$1" ] && echo "$@" >&2; }
____() { echo >&2; [ -n "$RCM_DELAY" ] && sleep "$RCM_DELAY"; }

# Define variables and constants.
RCM_DELAY=${RCM_DELAY:=.5}; [ -n "$fast" ] && unset RCM_DELAY
RCM_INDENT='    '; [ "$(tput cols)" -le 80 ] && RCM_INDENT='  '
DRUPAL_PREFIX=${DRUPAL_PREFIX:=/usr/local/share/drupal}
DRUPAL_PROJECTS_DIRNAME=${DRUPAL_PROJECTS_DIRNAME:=projects}
DRUPAL_USERS_DIRNAME=${DRUPAL_USERS_DIRNAME:=users}
DRUPAL_BINARY_DIRNAME=${DRUPAL_BINARY_DIRNAME:=bin}
DRUPAL_SITES_DIRNAME=${DRUPAL_SITES_DIRNAME:=sites}
BINARY_DIRECTORY=${BINARY_DIRECTORY:=[__DIR__]}

# Functions.
printVersion() {
    echo '0.12.0'
}
printHelp() {
    title RCM Drupal Setup Internal Command
    _ 'Variation '; yellow cd-drupal; _.
    _ 'Version '; yellow `printVersion`; _.
    _.
    cat << EOF
Usage: rcm-drupal-setup-internal-command-cd-drupal [options]

Options:

Global Options:
   --fast
        No delay every subtask.
   --version
        Print version of this script.
   --help
        Show this help.

Environment Variables:
   BINARY_DIRECTORY
        Default to $BINARY_DIRECTORY
   DRUPAL_PREFIX
        Default to $DRUPAL_PREFIX
   DRUPAL_PROJECTS_DIRNAME
        Default to $DRUPAL_PROJECTS_DIRNAME
   DRUPAL_USERS_DIRNAME
        Default to $DRUPAL_USERS_DIRNAME
   DRUPAL_SITES_DIRNAME
        Default to $DRUPAL_SITES_DIRNAME
   DRUPAL_BINARY_DIRNAME
        Default to $DRUPAL_BINARY_DIRNAME
EOF
}

# Help and Version.
[ -n "$help" ] && { printHelp; exit 1; }
[ -n "$version" ] && { printVersion; exit 1; }

# Title.
title rcm-drupal-setup-internal-command-cd-drupal
____

[ "$EUID" -ne 0 ] && { error This script needs to be run with superuser privileges.; x; }

# Dependency.
while IFS= read -r line; do
    [[ -z "$line" ]] || command -v `cut -d: -f1 <<< "${line}"` >/dev/null || { error Unable to proceed, command not found: '`'`cut -d: -f1 <<< "${line}"`'`'.; x; }
done <<< `printHelp 2>/dev/null | sed -n '/^Dependency:/,$p' | sed -n '2,/^\s*$/p' | sed 's/^ *//g'`

# Functions.
resolve_relative_path() {
    if [ -d "$1" ];then
        cd "$1" || return 1
        pwd
    elif [ -e "$1" ];then
        if [ ! "${1%/*}" = "$1" ]; then
            cd "${1%/*}" || return 1
        fi
        echo "$(pwd)/${1##*/}"
    else
        return 1
    fi
}
backupFile() {
    local mode="$1"
    local oldpath="$2" i newpath
    local target_dir="$3"
    i=1
    dirname=$(dirname "$oldpath")
    basename=$(basename "$oldpath")
    if [ -n "$target_dir" ];then
        case "$target_dir" in
            parent) dirname=$(dirname "$dirname") ;;
            *) dirname="$target_dir"
        esac
    fi
    [ -d "$dirname" ] || { echo 'Directory is not exists.' >&2; return 1; }
    newpath="${dirname}/${basename}.${i}"
    if [ -f "$newpath" ]; then
        let i++
        newpath="${dirname}/${basename}.${i}"
        while [ -f "$newpath" ] ; do
            let i++
            newpath="${dirname}/${basename}.${i}"
        done
    fi
    case $mode in
        move)
            mv "$oldpath" "$newpath" ;;
        copy)
            local user=$(stat -c "%U" "$oldpath")
            local group=$(stat -c "%G" "$oldpath")
            cp "$oldpath" "$newpath"
            chown ${user}:${group} "$newpath"
    esac
}
backupDir() {
    local oldpath="$1" i newpath
    # Trim trailing slash.
    oldpath=$(echo "$oldpath" | sed -E 's|/+$||g')
    i=1
    newpath="${oldpath}.${i}"
    if [ -e "$newpath" ]; then
        let i++
        newpath="${oldpath}.${i}"
        while [ -e "$newpath" ] ; do
            let i++
            newpath="${oldpath}.${i}"
        done
    fi
    mv "$oldpath" "$newpath"
}
fileMustExists() {
    # global used:
    # global modified:
    # function used: __, success, error, x
    if [ -f "$1" ];then
        __; green File '`'$(basename "$1")'`' ditemukan.; _.
    else
        __; red File '`'$(basename "$1")'`' tidak ditemukan.; x
    fi
}
isFileExists() {
    # global used:
    # global modified: found, notfound
    # function used: __
    found=
    notfound=
    if [ -f "$1" ];then
        __ File '`'$(basename "$1")'`' ditemukan.
        found=1
    else
        __ File '`'$(basename "$1")'`' tidak ditemukan.
        notfound=1
    fi
}
link_symbolic() {
    local source="$1"
    local target="$2"
    local sudo="$3"
    local source_mode="$4"
    local create
    [ "$sudo" == - ] && sudo=
    [ "$source_mode" == absolute ] || source_mode=
    [ -e "$source" ] || { error Source not exist: $source.; x; }
    [ -f "$source" ] || { error Source exists but not file: $source.; x; }
    [ -n "$target" ] || { error Target not defined.; x; }
    [[ $(type -t backupFile) == function ]] || { error Function backupFile not found.; x; }
    [[ $(type -t backupDir) == function ]] || { error Function backupDir not found.; x; }
    chapter Membuat symbolic link.
    __ source: '`'$source'`'
    __ target: '`'$target'`'
    if [ -f "$target" ];then
        if [ -h "$target" ];then
            __ Path target saat ini sudah merupakan file symbolic link: '`'$target'`'
            local _readlink=$(readlink "$target")
            __; magenta readlink "$target"; _.
            _ $_readlink; _.
            if [[ "$_readlink" =~ ^[^/\.] ]];then
                local target_parent=$(dirname "$target")
                local _dereference="${target_parent}/${_readlink}"
            elif [[ "$_readlink" =~ ^[\.] ]];then
                local target_parent=$(dirname "$target")
                local _dereference="${target_parent}/${_readlink}"
                _dereference=$(realpath -s "$_dereference")
            else
                _dereference="$_readlink"
            fi
            __; _, Mengecek apakah link merujuk ke '`'$source'`':' '
            if [[ "$source" == "$_dereference" ]];then
                _, merujuk.; _.
            else
                _, tidak merujuk.; _.
                __ Melakukan backup.
                backupFile move "$target"
                create=1
            fi
        else
            __ Melakukan backup regular file: '`'"$target"'`'.
            backupFile move "$target"
            create=1
        fi
    elif [ -d "$target" ];then
        __ Melakukan backup direktori: '`'"$target"'`'.
        backupDir "$target"
        create=1
    else
        create=1
    fi
    if [ -n "$create" ];then
        __ Membuat symbolic link: '`'$target'`'.
        local target_parent=$(dirname "$target")
        code mkdir -p "$target_parent"
        mkdir -p "$target_parent"
        if [ -z "$source_mode" ];then
            source=$(realpath -s --relative-to="$target_parent" "$source")
        fi
        if [ -n "$sudo" ];then
            code sudo -u '"'$sudo'"' ln -s '"'$source'"' '"'$target'"'
            sudo -u "$sudo" ln -s "$source" "$target"
        else
            code ln -s '"'$source'"' '"'$target'"'
            ln -s "$source" "$target"
        fi
        if [ $? -eq 0 ];then
            __; green Symbolic link berhasil dibuat.; _.
        else
            __; red Symbolic link gagal dibuat.; x
        fi
    fi
    ____
}
vercomp() {
    # https://www.google.com/search?q=bash+compare+version
    # https://stackoverflow.com/a/4025065
    if [[ $1 == $2 ]]; then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)); do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++)); do
        if [[ -z ${ver2[i]} ]];then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]})); then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]})); then
            return 2
        fi
    done
    return 0
}

# Requirement, validate, and populate value.
chapter Dump variable.
__FILE__=$(resolve_relative_path "$0")
__DIR__=$(dirname "$__FILE__")
code 'BINARY_DIRECTORY="'$BINARY_DIRECTORY'"'
find='[__DIR__]'
replace="$__DIR__"
BINARY_DIRECTORY="${BINARY_DIRECTORY/"$find"/"$replace"}"
code 'BINARY_DIRECTORY="'$BINARY_DIRECTORY'"'
code 'DRUPAL_PREFIX="'$DRUPAL_PREFIX'"'
code 'DRUPAL_PROJECTS_DIRNAME="'$DRUPAL_PROJECTS_DIRNAME'"'
code 'DRUPAL_BINARY_DIRNAME="'$DRUPAL_BINARY_DIRNAME'"'
code 'DRUPAL_SITES_DIRNAME="'$DRUPAL_SITES_DIRNAME'"'
print_version=`printVersion`
code 'print_version="'$print_version'"'
mktemp=
____

chapter Mengecek '`'cd-drupal'`' command.
fullpath="${DRUPAL_PREFIX}/${DRUPAL_BINARY_DIRNAME}/cd-drupal"
dirname="${DRUPAL_PREFIX}/${DRUPAL_BINARY_DIRNAME}"
isFileExists "$fullpath"
____

if [ -n "$found" ];then
    chapter Mengecek versi '`'cd-drupal'`' command.
    code cd-drupal --version
    if [ -z "$mktemp" ];then
        mktemp=$(mktemp -p /dev/shm)
    fi
    "$fullpath" --version 2>/dev/null > $mktemp
    while read line; do e "$line"; _.; done < $mktemp
    old_version=$(head -1 $mktemp)
    if [[ "$old_version" =~ [^0-9\.]+ ]];then
        old_version=0
    fi
    vercomp $print_version $old_version
    if [[ $? -eq 1 ]];then
        __ Command perlu diupdate. Versi saat ini ${print_version}.
        found=
        notfound=1
    else
        __ Command tidak perlu diupdate. Versi saat ini ${print_version}.
    fi
    ____
fi

if [ -n "$notfound" ];then
    chapter Create Drupal Command '`'cd-drupal'`'.
    mkdir -p "$dirname"
    touch "$fullpath"
    chmod a+x "$fullpath"
    cat << 'CDDRUPAL' > "$fullpath"
#!/bin/bash

# Parse Options.
_new_arguments=()
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help) help=1; shift ;;
        --version) version=1; shift ;;
        --[^-]*) shift ;;
        *) _new_arguments+=("$1"); shift ;;
    esac
done
set -- "${_new_arguments[@]}"
unset _new_arguments

# Common Functions.
red() { echo -ne "\e[91m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
green() { echo -ne "\e[92m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
yellow() { echo -ne "\e[93m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
magenta() { echo -ne "\e[95m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
error() { echo -n "$INDENT" >&2; red '#' "$@" >&2; echo >&2; }
_() { echo -n "$INDENT" >&2; echo -n "#"' ' >&2; [ -n "$1" ] && echo -n "$@" >&2; }
_,() { echo -n "$@" >&2; }
_.() { echo >&2; }
__() { echo -n "$INDENT" >&2; echo -n "# ${RCM_INDENT}" >&2; [ -n "$1" ] && echo "$@" >&2; }

# Define variables and constants.
RCM_INDENT='    '; [ "$(tput cols)" -le 80 ] && RCM_INDENT='  '
DRUPAL_PREFIX=__DRUPAL_PREFIX__
DRUPAL_PROJECTS_DIRNAME=__DRUPAL_PROJECTS_DIRNAME__
DRUPAL_USERS_DIRNAME=__DRUPAL_USERS_DIRNAME__
DRUPAL_SITES_DIRNAME=__DRUPAL_SITES_DIRNAME__
whoami=`whoami`
source=()

printVersion() {
    echo '__CURRENT_VERSION__'
}
printHelp() {
    cat << 'HELP'
Usage: . cd-drupal [project_name] [site_url]
       cd-drupal [project_name] [site_url]

       Change the shell working directory to Drupal Project, THEN
       set drush alias.

Options:
   --version
        Print version of this script.
   --help
        Show this help.

HELP
}
unsetvariables() {
    unset project_dir
    unset site_file
    unset value
    unset count
    unset help
    unset version
}
printSelectDialog() {
    _; _.
    __; _, '['; yellow Enter; _, ']'; _, ' '; _, 'Type the '; yellow N; _, 'umber key.'; _.
    if [ -z "$is_required" ];then
        __; _, '['; yellow Esc; _, ']'; _, ' '; yellow C; _, 'ancel.'; _.
    fi
    _; _.
    __ Press the yellow key to select.
    count_max="${#source[@]}"
    if [ $count_max -gt 9 ];then
        count_max=9
    fi
    while true; do
        __; read -rsn 1 -p "Select: " char;
        if [ -z "$char" ];then
            char=n
        fi
        case $char in
            n|N) echo "$char"; break ;;
            [1-$count_max])
                echo "$char"
                i=$((char - 1))
                value="${source[$i]}"
                break ;;
            *)
                if [ -n "$is_required" ];then
                    echo
                else
                    case $char in
                        $'\33') skip=1; echo "c"; break ;;
                        c|C) skip=1; echo "$char"; break ;;
                        *) echo
                    esac
                fi
        esac
    done
    if [[ -z "$skip" ]];then
        if [ -z "$value" ];then
            _; _.
        fi
        until [ -n "$value" ];do
            __; read -p "Type the number: " value
            if [[ $value =~ [^0-9] ]];then
                value=
                __; red Please type one of available number.;_.
            fi
            if [[ $value =~ ^0 ]];then
                value=
                __; red Please type one of available number.;_.
            fi
            if [ -n "$value" ];then
                value=$((value - 1))
                value="${source[$value]}"
                if [ -z "$value" ];then
                    __; red Please type one of available number.;_.
                fi
            fi
        done
        _; _.
    fi
}
url2Filename() {
    local url=$1 filename
    # Contoh 1:
    # uri=juragan.web.id:10001/cintakita/dot/com/sso
    # filename=juragan.web.id.10001-cintakita.dot.com.sso
    # Contoh 2:
    # uri=http://juragan.web.id:10001/cintakita/dot/com/sso/
    # filename=http.juragan.web.id.10001-cintakita.dot.com.sso
    # Contoh 3:
    # uri=https://juragan.web.id:10001/cintakita/dot/com/sso/
    # filename=juragan.web.id.10001-cintakita.dot.com.sso
    filename="${url}"
    filename="${filename/https:\/\//}"
    filename="${filename/http:\/\//http.}"
    filename="${filename/:/.}"
    filename="${filename/\//-}"
    filename="${filename//\//.}"
    echo "$filename"
}

if [[ -f "$0" && ! "$0" == $(command -v bash) ]];then
    # Help and Version.
    [ -n "$help" ] && { printHelp; exit 1; }
    [ -n "$version" ] && { printVersion; exit 1; }
else
    # Help and Version.
    _return=
    [ -n "$help" ] && { printHelp; _return=1; }
    [ -n "$version" ] && { printVersion; _return=1; }
    unsetvariables
    [ -n "$_return" ] && { unset _return; return; }
fi

if [[ -f "$0" && ! "$0" == $(command -v bash) ]];then
    if [ ! -t 0 ]; then
        # Sub shell. Example:
        # find-drupal drupalid | xargs cd-drupal
        # find-drupal drupalid | cd-drupal
        if [ -p /dev/stdin ];then
            # Standard Input tersedia, berarti eksekusi adalah:
            # find-drupal drupalid | cd-drupal
            error Execute as subshell may have unexpected behaviour. 1
            exit
        else
            # Standard Input tidak ada, berarti eksekusi adalah:
            # find-drupal drupalid | xargs cd-drupal
            error Execute as subshell may have unexpected behaviour. 2
            exit
        fi
    else
        _; yellow 'It is recommend to execute this command as dot command.'; _.
        _; yellow 'i.e. '; magenta '. cd-drupal'; _.
        _; yellow 'Otherwise, it will start new shell as a child process.'; _.
        _;_.
    fi
else
    if [ ! -t 0 ]; then
        # Sub shell. Example:
        # find-drupal drupalid | . cd-drupal
        error Execute as subshell may have unexpected behaviour. 3
        return
    fi
fi

_; _, Change the shell working directory to Drupal Project.; _.
_;_.

if [ "$EUID" -eq 0 ];then
    prefix="${DRUPAL_PREFIX}/${DRUPAL_PROJECTS_DIRNAME}"
else
    prefix="${DRUPAL_PREFIX}/${DRUPAL_USERS_DIRNAME}/${whoami}/projects"
fi

if [ ! -d "$prefix" ];then
    error "There's no Drupal Directory Project: ${prefix}";
    if [[ -f "$0" && ! "$0" == $(command -v bash) ]];then
        exit 1
    else
        return
    fi
fi

if [ -n "$1" ];then
    project_dir="$1"
    shift
    path="${prefix}/${project_dir}"
    if [ ! -d "$path" ];then
        error The Drupal project is not exists: '`'$project_dir'`'.
        if [[ -f "$0" && ! "$0" == $(command -v bash) ]];then
            exit 1
        else
            return
        fi
    fi
fi

if [ -z "$project_dir" ];then
    # @todo, projects_count >= 100
    source=(`ls -U "$prefix"`)
    if [ ${#source[@]} -eq 0 ];then
        error There are no Drupal project available.
        if [[ -f "$0" && ! "$0" == $(command -v bash) ]];then
            exit 1
        else
            return
        fi
    fi
    _ There are Drupal project available.;_.
    _;_.
    is_required=
    declare -i count
    for ((i = 0 ; i < ${#source[@]} ; i++)); do
        count+=1
        if [ $count -lt 10 ];then
            __; _, '['; yellow $count; _, ']'; _, ' '; _, "${source[$i]}"; _.
        else
            __; _, '['$count']' "${source[$i]}"; _.
        fi
    done
    printSelectDialog
    if [ -z "$value" ];then
        if [[ -f "$0" && ! "$0" == $(command -v bash) ]];then
            exit 1
        else
            return
        fi
    fi
    project_dir=$value
fi

if [ -n "$1" ];then
    site_url="$1"
    shift
    site_file=$(url2Filename "$site_url")
    path="${DRUPAL_PREFIX}/${DRUPAL_PROJECTS_DIRNAME}/${project_dir}/${DRUPAL_SITES_DIRNAME}/${site_file}"
    if [ ! -f "$path" ];then
        error The Drupal site URL is not exists: '`'$site_url'`'.
        if [[ -f "$0" && ! "$0" == $(command -v bash) ]];then
            exit 1
        else
            return
        fi
    fi
fi

if [ -z "$site_file" ];then
    path="${DRUPAL_PREFIX}/${DRUPAL_PROJECTS_DIRNAME}/${project_dir}/${DRUPAL_SITES_DIRNAME}"
    # @todo, projects_count >= 100
    source=(`ls -U "$path"`)
    if [ ${#source[@]} -eq 0 ];then
        error There are no Drupal sites available.
        if [[ -f "$0" && ! "$0" == $(command -v bash) ]];then
            exit 1
        else
            return
        fi
    fi
    # Clear same parameter.
    value=
    _ There are Drupal sites available.;_.
    _;_.
    is_required=
    unset count
    declare -i count
    for ((i = 0 ; i < ${#source[@]} ; i++)); do
        count+=1
        site_file="${source[$i]}"
        # Versi 0.11.x
        RCM_DRUPAL_VERSION=$("${DRUPAL_PREFIX}/${DRUPAL_PROJECTS_DIRNAME}/${project_dir}/${DRUPAL_SITES_DIRNAME}/${site_file}" --version)
        if [ -n "$RCM_DRUPAL_VERSION" ];then
            DRUPAL_SITE_URL=$("${DRUPAL_PREFIX}/${DRUPAL_PROJECTS_DIRNAME}/${project_dir}/${DRUPAL_SITES_DIRNAME}/${site_file}" --url)
        else
            # Versi >= 0.12.x
            DRUPAL_SITE_URL=
            . "${DRUPAL_PREFIX}/${DRUPAL_PROJECTS_DIRNAME}/${project_dir}/${DRUPAL_SITES_DIRNAME}/${site_file}"
            [ -n "$DRUPAL_SITE_URL" ] || DRUPAL_SITE_URL=-
        fi
        if [ $count -lt 10 ];then
            __; _, '['; yellow $count; _, ']'; _, ' '; _, "$DRUPAL_SITE_URL"; _.
        else
            __; _, '['$count']' "$DRUPAL_SITE_URL"; _.
        fi
    done
    printSelectDialog
    if [ -z "$value" ];then
        if [[ -f "$0" && ! "$0" == $(command -v bash) ]];then
            exit 1
        else
            return
        fi
    fi
    site_file=$value
fi

# Versi 0.11.x
RCM_DRUPAL_VERSION=$("${DRUPAL_PREFIX}/${DRUPAL_PROJECTS_DIRNAME}/${project_dir}/${DRUPAL_SITES_DIRNAME}/${site_file}" --version)
if [ -n "$RCM_DRUPAL_VERSION" ];then
    case "$RCM_DRUPAL_VERSION" in
        0\.11\.35|0\.11\.34)
            if [[ -f "$0" && ! "$0" == $(command -v bash) ]];then
                "${DRUPAL_PREFIX}/${DRUPAL_PROJECTS_DIRNAME}/${project_dir}/${DRUPAL_SITES_DIRNAME}/${site_file}"
            else
                . "${DRUPAL_PREFIX}/${DRUPAL_PROJECTS_DIRNAME}/${project_dir}/${DRUPAL_SITES_DIRNAME}/${site_file}"
            fi
            ;;
        # Versi 0.11.33 kebawah tidak bisa dieksekusi sebagai non dot command..
        *)
            if [[ -f "$0" && ! "$0" == $(command -v bash) ]];then
                echo -e "\e[91m""Usage: . "$(basename "$0") "\e[39m";
                exit
            else
                . "${DRUPAL_PREFIX}/${DRUPAL_PROJECTS_DIRNAME}/${project_dir}/${DRUPAL_SITES_DIRNAME}/${site_file}"
            fi
    esac
else
    # Versi >= 0.12.x
    # Load variable.
    . "${DRUPAL_PREFIX}/${DRUPAL_PROJECTS_DIRNAME}/${project_dir}/${DRUPAL_SITES_DIRNAME}/${site_file}"
    export DRUPAL_PROJECT_ROOT="$DRUPAL_PROJECT_ROOT"
    export DRUPAL_SITE_URL="$DRUPAL_SITE_URL"
    magenta export;_, ' 'DRUPAL_PROJECT_ROOT=; yellow '"'$DRUPAL_PROJECT_ROOT'"';_.
    magenta export;_, ' 'DRUPAL_SITE_URL=;yellow '"'"$DRUPAL_SITE_URL"'"';_.
    magenta alias;_, ' '; green drush; _, =; yellow '"''$DRUPAL_PROJECT_ROOT'/vendor/bin/drush --uri='$DRUPAL_SITE_URL''"';_.
    magenta cd;yellow ' "$DRUPAL_PROJECT_ROOT"'; _, ' && [ '; magenta '-f'; _, ' .rc ] && . .rc';_.
    _;_.
    _ The current working directory has been changed.;_.
    _ Command; _, ' '; green drush; _, ' 'ready to use.;_.
    _;_.
    if [[ -f "$0" && ! "$0" == $(command -v bash) ]];then
        date=$(date +%Y%m%d-%H%M%S)
        date+=-$RANDOM-$RANDOM
        echo 'alias drush="$DRUPAL_PROJECT_ROOT/vendor/bin/drush --uri=$DRUPAL_SITE_URL" # delete this line '"$date" >> "${HOME}/.bashrc"
        echo '[ -f "${DRUPAL_PROJECT_ROOT}/.rc" ] && . "${DRUPAL_PROJECT_ROOT}/.rc"  # delete this line '"$date" >> "${HOME}/.bashrc"
        echo 'sed "/'"$date"'/d" -i "'"${HOME}"'/.bashrc"              # delete this line '"$date" >> "${HOME}/.bashrc"
        bash -c 'cd "'"${DRUPAL_PROJECT_ROOT}"'"; bash'
    else
        alias drush="$DRUPAL_PROJECT_ROOT/vendor/bin/drush --uri=$DRUPAL_SITE_URL"
        cd "$DRUPAL_PROJECT_ROOT" && [ -f .rc ] && . .rc
    fi
fi
CDDRUPAL
    sed -i "s|__DRUPAL_PREFIX__|${DRUPAL_PREFIX}|g" "$fullpath"
    sed -i "s|__DRUPAL_PROJECTS_DIRNAME__|${DRUPAL_PROJECTS_DIRNAME}|g" "$fullpath"
    sed -i "s|__DRUPAL_USERS_DIRNAME__|${DRUPAL_USERS_DIRNAME}|g" "$fullpath"
    sed -i "s|__DRUPAL_SITES_DIRNAME__|${DRUPAL_SITES_DIRNAME}|g" "$fullpath"
    sed -i "s|__CURRENT_VERSION__|${print_version}|g" "$fullpath"
    fileMustExists "$fullpath"
    ____
fi

link_symbolic "$fullpath" "$BINARY_DIRECTORY/cd-drupal"

if [ -n "$mktemp" ];then
    rm "$mktemp"
fi

exit 0

# parse-options.sh \
# --without-end-options-double-dash \
# --compact \
# --clean \
# --no-hash-bang \
# --no-original-arguments \
# --no-error-invalid-options \
# --no-error-require-arguments << EOF | clip
# FLAG=(
# --fast
# --version
# --help
# )
# VALUE=(
# )
# FLAG_VALUE=(
# )
# EOF
# clear
