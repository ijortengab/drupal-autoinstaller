#!/bin/bash

# Common Functions.
red() { echo -ne "\e[91m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
green() { echo -ne "\e[92m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
yellow() { echo -ne "\e[93m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
blue() { echo -ne "\e[94m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
magenta() { echo -ne "\e[95m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
error() { echo -n "$INDENT" >&2; red '#' "$@" >&2; echo >&2; }
success() { echo -n "$INDENT" >&2; green '#' "$@" >&2; echo >&2; }
chapter() { echo -n "$INDENT" >&2; yellow '#' "$@" >&2; echo >&2; }
title() { echo -n "$INDENT" >&2; blue '#' "$@" >&2; echo >&2; }
code() { echo -n "$INDENT" >&2; magenta "$@" >&2; echo >&2; }
x() { echo >&2; exit 1; }
e() { echo -n "$INDENT" >&2; echo -n "$@" >&2; }
_() { echo -n "$INDENT" >&2; echo -n "#"' ' >&2; [ -n "$1" ] && echo -n "$@" >&2; }
_,() { echo -n "$@" >&2; }
_.() { echo >&2; }
__() { echo -n "$INDENT" >&2; echo -n "# ${RCM_INDENT}" >&2; [ -n "$1" ] && echo "$@" >&2; }
___() { echo -n "$INDENT" >&2; echo -n "# ${RCM_INDENT}${RCM_INDENT}" >&2; [ -n "$1" ] && echo "$@" >&2 || echo -n  >&2; }
____() { echo >&2; [ -n "$RCM_DELAY" ] && sleep "$RCM_DELAY"; }

# Parse arguments. Generated by parse-options.sh.
_new_arguments=()
_n=
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help) help=1; shift ;;
        --version) version=1; shift ;;
        --fast) fast=1; shift ;;
        --mode=*) mode="${1#*=}"; shift ;;
        --mode) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then mode="$2"; shift; fi; shift ;;
        --non-interactive) non_interactive=1; shift ;;
        --verbose|-v) verbose="$((verbose+1))"; shift ;;
        --)
            while [[ $# -gt 0 ]]; do
                case "$1" in
                    *) _new_arguments+=("$1"); shift ;;
                esac
            done
            ;;
        --[^-]*) shift ;;
        *) _new_arguments+=("$1"); shift ;;
    esac
done
set -- "${_new_arguments[@]}"
_new_arguments=()
while [[ $# -gt 0 ]]; do
    case "$1" in
        -[^-]*) OPTIND=1
            while getopts ":v" opt; do
                case $opt in
                    v) verbose="$((verbose+1))" ;;
                esac
            done
            _n="$((OPTIND-1))"
            _n=${!_n}
            shift "$((OPTIND-1))"
            if [[ "$_n" == '--' ]];then
                while [[ $# -gt 0 ]]; do
                    case "$1" in
                        *) _new_arguments+=("$1"); shift ;;
                    esac
                done
            fi
            ;;
        --) shift
            while [[ $# -gt 0 ]]; do
                case "$1" in
                    *) _new_arguments+=("$1"); shift ;;
                esac
            done
            ;;
        *) _new_arguments+=("$1"); shift ;;
    esac
done
set -- "${_new_arguments[@]}"
unset _new_arguments
unset _n

# Define variables and constants.
[ -z "$fast" ] && fast="$RCM_FAST"; [ "$fast" == 0 ] && fast=
RCM_DELAY=${RCM_DELAY:=.5}; [ -n "$fast" ] && unset RCM_DELAY
RCM_INDENT='    '; [ "$(tput cols)" -le 80 ] && RCM_INDENT='  '
DRUPAL_PREFIX=${DRUPAL_PREFIX:=/usr/local/share/drupal}
DRUPAL_PROJECTS_DIRNAME=${DRUPAL_PROJECTS_DIRNAME:=projects}
[ -n "$RCM_TABLE_DOWNLOADS" ] && table_downloads="$RCM_TABLE_DOWNLOADS"

# Command.
command="$1"; shift
if [ -n "$command" ];then
    case "$command" in
        mode-available) ;;
        *)
            # Bring back command as argument position.
            set -- "$command" "$@"
            # Reset command.
            command=
    esac
fi

# Functions.
printVersion() {
    echo '0.12.0'
}
printHelp() {
    title Drupal Auto-Installer
    _ 'Homepage '; yellow https://github.com/ijortengab/drupal-autoinstaller; _.
    _ 'Version '; yellow `printVersion`; _.
    _.
    cat << EOF
Usage: rcm-drupal [command] [options]

Options:
   --mode *
        Select the setup mode. Values available from command: rcm-drupal(mode-available).

Global Options.
   --fast
        No delay every subtask.
   --version
        Print version of this script.
   --help
        Show this help.
   --non-interactive
        Skip prompt for every options.
   --
        Every arguments after double dash will pass to rcm-drupal-setup-variation-* command.

Dependency:
   rcm:0.16.25

Download:
   [rcm-drupal-setup-variation-default](https://github.com/ijortengab/drupal-autoinstaller/raw/master/rcm/drupal/rcm-drupal-setup-variation-default.sh)
   [rcm-drupal-setup-variation-lemp-stack](https://github.com/ijortengab/drupal-autoinstaller/raw/master/rcm/drupal/rcm-drupal-setup-variation-lemp-stack.sh)
   [rcm-drupal-setup-variation-multisite](https://github.com/ijortengab/drupal-autoinstaller/raw/master/rcm/drupal/rcm-drupal-setup-variation-multisite.sh)
   [rcm-drupal-setup-variation-bundle](https://github.com/ijortengab/drupal-autoinstaller/raw/master/rcm/drupal/rcm-drupal-setup-variation-bundle.sh)
EOF
}

# Help and Version.
[ -n "$help" ] && { printHelp; exit 1; }
[ -n "$version" ] && { printVersion; exit 1; }

ArraySearch() {
    local index match="$1"
    local source=("${!2}")
    for index in "${!source[@]}"; do
       if [[ "${source[$index]}" == "${match}" ]]; then
           _return=$index; return 0
       fi
    done
    return 1
}
explodeParagraphs() {
    # Explode kalimat by space, tanpa menghilangkan space itu sendiri.
    # Karena space diperlukan untuk menghitung panjang karakter sehingga
    # tidak bisa dihapuskan.
    # Space berada pada prefix each word.
    # Trailing space pada kalimat menjadi milik last word.
    #
    # global words_array
    byTab() {
        # Explode lagi berdasarkan karakter TAB.
        # global words_array
        local words_array_clone each tab left_tab right_tab string
        words_array_clone=("${words_array[@]}")
        words_array=()
        for each in "${words_array_clone[@]}"; do
            string="$each"
            if [[ "$string" =~ $'\t' ]];then
                while IFS= read line; do
                    tab="$line"
                    left_tab="${string%%${tab}*}"
                    [ -n "$left_tab" ] && words_array+=("$left_tab")
                    words_array+=("$tab")
                    right_tab="${string#${left_tab}}"
                    right_tab=${right_tab:1}
                    string="$right_tab"
                done <<< `echo "$string" | grep -E -o $'\t'`
                [ -n "$string" ] && words_array+=("$string")
            else
                [ -n "$string" ] && words_array+=("$string")
            fi
        done
    }
    byTag() {
        # Explode lagi berdasarkan tag <string>.
        # global words_array
        local words_array_clone each tag left_tag right_tag string
        words_array_clone=("${words_array[@]}")
        words_array=()
        for each in "${words_array_clone[@]}"; do
            string="$each"
            # if grep -q -E '</?[^</>]+>' <<< "$string";then
            if [[ "$string" =~ \</?[^\</\>]+\> ]];then
                while IFS= read line; do
                    tag="$line"
                    left_tag="${string%%${tag}*}"
                    [ -n "$left_tag" ] && words_array+=("$left_tag")
                    words_array+=("$tag")
                    right_tag="${string#${left_tag}}"
                    right_tag=${right_tag:${#tag}}
                    string="$right_tag"
                done <<< `echo "$string" | grep -E -o '</?[^</>]+>'`
                [ -n "$string" ] && words_array+=("$string")
            else
                [ -n "$string" ] && words_array+=("$string")
            fi
        done
    }
    bySpace() {
        # Explode lagi berdasarkan space.
        # global words_array
        local words_array_clone each tag left_tag right_tag string
        words_array_clone=("${words_array[@]}")
        words_array=()
        for each in "${words_array_clone[@]}"; do
            string="$each"
            if [[ "$string" =~ ' ' ]];then
                while IFS= read line; do
                    tag="$line"
                    left_tag="${string%%${tag}*}"
                    [ -n "$left_tag" ] && words_array+=("$left_tag")
                    words_array+=("$tag")
                    right_tag="${string#${left_tag}}"
                    right_tag=${right_tag:${#tag}}
                    string="$right_tag"
                done <<< `echo "$string" | grep -E -o ' +'`
                [ -n "$string" ] && words_array+=("$string")
            else
                [ -n "$string" ] && words_array+=("$string")
            fi
        done
    }
    local string="$1"; shift
    # Jika karakter spasi semuanya, maka:
    if [[ "$string" =~ ^[\ ]+$ ]];then
        words_array=("$string")
        return
    fi
    local by_tab by_tag by_space
    while [[ $# -gt 0 ]]; do
        case "$1" in
            +byTab) by_tab=1; shift ;;
            +byTag) by_tag=1; shift ;;
            +bySpace) by_space=1; shift ;;
            *) shift ;;
        esac
    done
    local line leading_space trailing_space
    words_array=()
    leading_space=$(echo "$string" | grep -E -o '^[\ ]+')
    trailing_space=$(echo "$string" | grep -E -o '[\ ]+$')
    if [ -n "$leading_space" ];then
        string=$(echo "$string" | sed -E 's|^[\ ]+(.*)|\1|')
    fi
    if [ -n "$trailing_space" ];then
        string=$(echo "$string" | sed -E 's|(.*)[\ ]+$|\1|')
    fi
    words_array[0]=$(echo "$string" | grep -E -o '^[^\ ]+')
    words_array[0]="$leading_space""${words_array[0]}"
    local i=1
    while IFS= read line; do
        if [ -n "$line" ];then
            words_array[$i]="$line"
            let i++
        fi
    done <<< `echo "$string" | grep -E -o '[\ ]+[^\ ]+'`
    if [ $i -gt 0 ];then
        let i--
        words_array[$i]="${words_array[$i]}""$trailing_space"
    fi
    [ -n "$by_tab" ] && byTab
    [ -n "$by_tag" ] && byTag
    [ -n "$by_space" ] && bySpace
}
wordWrapParagraph() {
    cleaningTag() {
        # Menghilangkan tag warna, open tag maupun close tag.
        # global each
        # global color
        local string="$1"
        opentag=$(echo "$string" | grep -E -o '<[^</>]+>')
        if [ -n "$opentag" ];then
            # color=$(echo "$opentag" | grep -E -o '[^<>]+')
            color="${opentag:1:-1}"
            string=${string//"$opentag"/}
            closetag="</${color}>"
            # if grep -q -F "$closetag" <<< "$string";then
            if [[ "$string" =~ "$closetag" ]];then
                color_stop=1
                string=${string//"$closetag"/}
            fi
        fi
        each="$string"
    }
    cleaningCloseTag() {
        # global each
        # global color
        local string="$1"
        closetag="</${color}>"
        # if grep -q -F "$closetag" <<< "$string";then
        if [[ "$string" =~ "$closetag" ]];then
            color_stop=1
            string=${string//"$closetag"/}
        fi
        each="$string"
    }
    colorStop() {
        # global color_stop
        # global default_color
        if [ -n "$color_stop" ];then
            color=$default_color
            color_stop=
        fi
    }
    strip_tags() {
        # global _return
        local string="$1" each
        _return=
        if [[ "$string" =~ \</?[^\</\>]+\> ]];then
            while IFS= read line; do
                tag="$line"
                left_tag="${string%%${tag}*}"
                [ -n "$left_tag" ] && _return+="$left_tag"
                right_tag="${string#${left_tag}}"
                right_tag=${right_tag:${#tag}}
                string="$right_tag"
            done <<< `echo "$string" | grep -E -o '</?[^</>]+>'`
            [ -n "$string" ] && _return+="$string"
        else
            [ -n "$string" ] && _return+="$string"
        fi
    }
    calculateTabStopPosition() {
        # global tab_stop_position
        local string="$1" words_array each left_tab tab _return
        tab=$'\t'
        left_tab="${string%%${tab}*}"
        local i=0
        until [[ ! "${#left_tab}" -lt "${#string}" ]];do
            right_tab="${string#${left_tab}}"
            right_tab=${right_tab:1}
            # Populate variable $_return.
            strip_tags "$left_tab"
            _current="${tab_stop_position[$i]}"
            if [ -n "$_current" ];then
                if [ "${#_return}" -gt "$_current" ];then
                    tab_stop_position[$i]="${#_return}"
                fi
            else
                tab_stop_position[$i]="${#_return}"
            fi
            string="$right_tab"
            left_tab="${string%%${tab}*}"
            let i++
        done
    }
    wordWrapSentence() {
        populateHangingIndent() {
            # global each
            # global hanging_indent_additional
            # global indent_hanging
            # global tab_stop_position
            hanging_indent_additional=0
            if [[ "$indent_hanging" -gt 0 && "${#tab_stop_position[@]}" -gt 0 ]];then
                for ((tab_index = 0 ; tab_index < $indent_hanging ; tab_index++)); do
                    hanging_indent_additional=$((hanging_indent_additional + ${tab_stop_position[$tab_index]}))
                done
            fi
            hanging_indent_additional=$(printf %"${hanging_indent_additional}"s)
            # Trim leading space.
            each=$(echo "$each" | sed -E 's|^[\ ]+(.*)|\1|')
            if [[ "$each" =~ ^[\ ]+$ ]];then
                each=
            fi
        }
        colorize() {
            local string="$1" words_array color each last opentag closetag
            if [[ ! "$string" =~ [\<\>] ]];then
                # Tanpa warna. Contoh: "Variation"
                _, "$string"
            elif [[ "$string" =~ ^\<[^\<\>]+\>[^\<\>]+\</[^\<\>]+\>[\.,]?$ ]];then
                # Hanya satu warna.
                # Contoh: "<red>debian11a</red>."
                #         "<hN>11</hN>,"
                #         "<hN>8.1</hN>,"
                color="${string#<}"
                color="${color/%>*}"
                last="${string/#*>}"
                opentag="<${color}>"
                closetag="</${color}>"
                string=${string//"$opentag"/}
                string=${string//"${closetag}${last}"/}
                $color "$string"
                [ -n "$last" ] && _, "$last"
            else
                # Banyak warna.
                # Contoh: "<green2>debian12apakah76</green2>apakahyaa<red>tempe</red>.."
                # _, "$string"
                [ -z $default_color ] && default_color=_,
                color="$default_color"
                explodeParagraphs "$string" +byTag
                for each in "${words_array[@]}"; do
                    cleaningTag "$each"
                    cleaningCloseTag "$each"
                    $color "$each"
                    colorStop
                done
            fi
        }
        # global cols
        # global indent_first_line
        # global indent_hanging
        # global tab_stop_position
        local paragraph="$1" words_array default_color="$2" color
        local each each_original each_stripped
        local current_line _current_line first_line last hanging_indent_additional
        local tab_index=0
        local max=0
        local min=0
        max=$cols
        local _indent_first_line
        _indent_first_line=$((indent_first_line + 2))
        # Angka 2 adalah tambahan dari '# '.
        _max=$((100 + ${#INDENT} + $_indent_first_line))
        if [ $max -gt $_max ];then
            max=100
            min=80
        else
            max=$((max - ${#INDENT} - $_indent_first_line))
            min="$max"
        fi
        explodeParagraphs "$paragraph" +byTab +byTag +bySpace
        current_line=
        merged=
        local words_array_clone=("${words_array[@]}")
        words_array=()
        for each in "${words_array_clone[@]}"; do
            if [[ ! "$each" =~ ^[\ $'\t']+$ ]];then
                merged+="$each"
            else
                if [ -n "$merged" ];then
                    words_array+=("$merged")
                    merged=
                fi
                words_array+=("$each")
            fi
        done
        if [ -n "$merged" ];then
            words_array+=("$merged")
        fi
        unset words_array_clone
        local i=0
        local count="${#words_array[@]}"
        first_line=1
        for each in "${words_array[@]}"; do
            each_original="$each"
            if [[ "$each" == $'\t' ]];then
                each=
                local x
                next_tab=0
                for ((x = 0 ; x <= $tab_index ; x++)); do
                    next_tab=$((next_tab + ${tab_stop_position[$x]}))
                done
                if [[ "$next_tab" -gt "${#current_line}" ]];then
                    additional_space=$((next_tab - "${#current_line}" ))
                    each=$(printf %"${additional_space}"s)
                fi
                let tab_index++
            fi
            strip_tags "$each"
            each_stripped="$_return"
            let i++
            [ "$i" == "$count" ] && last=1 || last=
            if [ -z "$current_line" ]; then
                if [ -n "$first_line" ];then
                    first_line=
                    current_line="$each_stripped"
                    _; printf %"${indent_first_line}"s >&2; colorize "$each"
                else
                    current_line="$each_stripped"
                    _; printf %"${indent_first_line}"s >&2;
                    populateHangingIndent
                    current_line="${hanging_indent_additional}${each_stripped}"
                    _, "$hanging_indent_additional"; colorize "$each"
                fi
                if [ -n "$last" ];then
                    _.
                fi
            else
                _current_line="${current_line}${each_stripped}"
                if [ "${#_current_line}" -gt $max ];then
                    if [[ "$each_original" == $'\t' &&  "$each_stripped" =~ ^[\ ]+$ ]];then
                        each_stripped=
                        each=
                        _current_line="${current_line}${each_stripped}"
                    fi
                fi
                if [ "${#_current_line}" -le $min ];then
                    current_line+="$each_stripped"
                    colorize "$each"
                    if [ -n "$last" ];then
                        _.
                    fi
                elif [ "${#_current_line}" -le $max ];then
                    colorize "$each"; _.
                    current_line=
                else
                    _.;
                    _; printf %"${indent_first_line}"s >&2;
                    populateHangingIndent
                    current_line="${hanging_indent_additional}${each_stripped}"
                    _, "$hanging_indent_additional"; colorize "$each"
                    if [ -n "$last" ];then
                        _.
                    fi
                fi
            fi
        done
    }
    # global tab_stop_position
    local lines=("${!1}"); shift
    local line
    local output indent_first_line indent_hanging tempfile
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --indent=*) indent_first_line="${1#*=}"; shift ;;
            --indent-hanging=*) indent_hanging="${1#*=}"; shift ;;
            --output=*) output="${1#*=}"; shift ;;
            *) shift ;;
        esac
    done
    local cols=$(tput cols)
    indent_first_line=$((indent_first_line*${#RCM_INDENT}))
    [ -z "$indent_hanging" ] && indent_hanging=0
    # Hitung karakter [tab] di setiap baris.
    # Boleh predefined untuk mempercepat karena variable tab_stop_position
    # adalah variable global.
    if [[ "${#tab_stop_position[@]}" -eq 0 ]];then
        for line in "${lines[@]}"; do
            calculateTabStopPosition "$line"
        done
    fi
    # echo '"${tab_stop_position[@]}"' "${tab_stop_position[@]}" >&2
    # Start drawing.
    if [ -n "$output" ];then
        tempfile="$output"
        for line in "${lines[@]}"; do
            wordWrapSentence "$line" 2>> "$tempfile"
        done
    else
        temp=
        for line in "${lines[@]}"; do
            temp=$(wordWrapSentence "$line" 2>&1)
            echo "$temp" >&2
        done
    fi
}

# Functions.
mode-available() {
    command_required=(nginx mysql php composer)
    command_notfound=
    for each in "${command_required[@]}"; do
        if ! command -v $each >/dev/null;then
            command_notfound+=" $each"
        fi
    done

    if [ -n "$command_notfound" ];then
        mode_available+=(init)
    else
        mode_available+=(new)
        mode_available+=(custom)
        if command -v ls-drupal >/dev/null;then
            if [[ $(ls-drupal | wc -l) -gt 0 ]];then
                mode_available+=(multisite)
            fi
        elif [ -d "${DRUPAL_PREFIX}/${DRUPAL_PROJECTS_DIRNAME}" ];then
            if [[ $(ls "${DRUPAL_PREFIX}/${DRUPAL_PROJECTS_DIRNAME}" | wc -l) -gt 0 ]];then
                mode_available+=(multisite)
            fi
        fi
    fi
    _; _.
    longest_text='#         Mode custom       Create a new project (custom). Beware of potential incompatibility'
    if [[ $(tput cols) -gt "${#longest_text}" ]];then
        if ArraySearch init mode_available[@] ]];then color=green; else color=red; fi
        ___; _, 'Mode '; $color init;  _, '         Create a new project (bundle) + Initialization.'; _.
        ___; _, '                  ';           _, 'LEMP Stack Setup. Linux, (e)Nginx, MySQL/MariaDB, PHP.'; _.;
        ___; _, '                  ';           _, 'PHP Composer Setup.'; _.;
        if ArraySearch new mode_available[@] ]];then color=green; else color=red; fi
        ___; _, 'Mode '; $color new; _, '         ' Create a new project '(bundle)'. ; _.
        if ArraySearch custom mode_available[@] ]];then color=green; else color=red; fi
        ___; _, 'Mode '; $color custom; _, '      ' Create a new project '(custom)'. Beware of potential incompatibility; _.
        ___; _, '                  ';            _, issue between Drupal and it\'s requirements.; _.;
        ___; _, '                  ';            _, PHP Composer Setup.; _.;
        if ArraySearch multisite mode_available[@] ]];then color=green; else color=red; fi
        ___; _, 'Mode '; $color multisite; _, '   ' Drupal Multisite. Add sub project. ; _.
        ___; _, '                  ';            _, Using the same codebase with the existing project.; _.;
    else
        tab_stop_position=(18)

        lines=()
        if ArraySearch init mode_available[@] ]];then color=green; else color=red; fi
        lines+=(       "Mode <${color}>init</${color}> -->Create a new project (bundle) + Initialization.")
        lines+=(                                      "-->LEMP Stack Setup. Linux, (e)Nginx, MySQL/MariaDB, PHP.")
        lines+=(                                      "-->PHP Composer Setup.")
        if ArraySearch new mode_available[@] ]];then color=green; else color=red; fi
        lines+=(        "Mode <${color}>new</${color}> -->Create a new project (bundle).")
        if ArraySearch custom mode_available[@] ]];then color=green; else color=red; fi
        lines+=(     "Mode <${color}>custom</${color}> -->Create a new project (custom). Beware of potential incompatibility issue between Drupal and it's requirements.")
        lines+=(                                      "-->PHP Composer Setup.")
        if ArraySearch multisite mode_available[@] ]];then color=green; else color=red; fi
        lines+=(  "Mode <${color}>multisite</${color}> -->Drupal Multisite. Add sub project.")
        lines+=(                                      "-->Using the same codebase with the existing project.")
        lines_cloned=("${lines[@]}")
        lines=()
        for line in "${lines_cloned[@]}"; do
            lines+=("$(echo "$line" | sed -E s,-+\>,$'\t',g)")
        done
        unset lines_cloned

        # Output di print semua sekaligus, secara UX cukup cepat.
        tempfile=$(mktemp -p /dev/shm -t rcm-drupal.XXXXXX)
        wordWrapParagraph lines[@] --indent=2 --indent-hanging=1 --output="$tempfile" &
        pid=$!
        spin='-\|/'
        i=0
        while kill -0 $pid 2>/dev/null
        do
          i=$(( (i+1) %4 ))
          printf "\r" >&2; __; _, "Waiting...${spin:$i:1}"
          sleep .1
        done
        printf "\r\033[K" >&2;
        cat "$tempfile" >&2
    fi

    for each in init new custom multisite; do
        if ArraySearch $each mode_available[@] ]];then echo $each; fi
    done
}

# Execute command.
if [[ -n "$command" && $(type -t "$command") == function ]];then
    "$command"
    exit 0
fi

# Title.
title rcm-drupal
____

wordWrapCommand() {
    # global words_array
    local inline_description="$1"
    local current_line first_line
    declare -i max
    declare -i min

    max=$(tput cols)
    # Angka 2 adalah tambahan dari ' \'.
    _max=$((100 + ${#INDENT} + 2))
    if [ $max -gt $_max ];then
        max=100
        min=80
    else
        max=$((max - ${#INDENT} - 2))
        min="$max"
    fi

    declare -i i; i=0
    local count="${#words_array[@]}"
    current_line=
    first_line=1
    for each in "${words_array[@]}"; do
        i+=1
        [ "$i" == "$count" ] && last=1 || last=
        if [ -z "$current_line" ]; then
            if [ -z "$first_line" ];then
                current_line="${RCM_INDENT}${each}"
                e; magenta "${RCM_INDENT}${each}";
            else
                first_line=
                if [ -n "$inline_description" ];then
                    e; _, "${inline_description} "; magenta "$each"
                    current_line="${inline_description} ${each}"
                else
                    e; magenta "$each"
                    current_line="$each"
                fi
            fi
            if [ -n "$last" ];then
                _.
            fi
        else
            _current_line="${current_line} ${each}"
            if [ "${#_current_line}" -le $min ];then
                if [ -n "$last" ];then
                    _, ' '; magenta "$each"; _.
                else
                    _, ' '; magenta "$each"
                fi
                current_line+=" ${each}"
            elif [ "${#_current_line}" -le $max ];then
                if [ -n "$last" ];then
                    _, ' '; magenta "${each}"''; _.
                else
                    _, ' '; magenta "${each}"' \'; _.
                fi
                current_line=
            else
                magenta ' \'; _.; e; magenta "${RCM_INDENT}${each}"
                current_line="${RCM_INDENT}${each}"
                if [ -n "$last" ];then
                    _.
                fi
            fi
        fi
    done
}

[ "$EUID" -ne 0 ] && { error This script needs to be run with superuser privileges.; x; }

# Dependency.
while IFS= read -r line; do
    [[ -z "$line" ]] || command -v `cut -d: -f1 <<< "${line}"` >/dev/null || { error Unable to proceed, command not found: '`'`cut -d: -f1 <<< "${line}"`'`'.; x; }
done <<< `printHelp 2>/dev/null | sed -n '/^Dependency:/,$p' | sed -n '2,/^\s*$/p' | sed 's/^ *//g'`

# Require, validate, and populate value.
chapter Dump variable.
[ -n "$fast" ] && isfast=' --fast' || isfast=''
[ -n "$non_interactive" ] && isnoninteractive=' --non-interactive' || isnoninteractive=''
[ -n "$verbose" ] && {
    for ((i = 0 ; i < "$verbose" ; i++)); do
        isverbose+=' --verbose'
    done
} || isverbose=

if [ -n "$mode" ];then
    case "$mode" in
        init|new|custom|multisite) ;;
        *) error "Argument --mode not valid."; x ;;
    esac
fi
if [ -z "$mode" ];then
    error "Argument --mode required."; x
fi
code 'mode="'$mode'"'
print_version=`printVersion`
____

case "$mode" in
    init) rcm_operand=drupal-setup-variation-lemp-stack ;;
    new) rcm_operand=drupal-setup-variation-bundle ;;
    custom) rcm_operand=drupal-setup-variation-default ;;
    multisite) rcm_operand=drupal-setup-variation-multisite ;;
    *) error "Argument --mode not valid."; x ;;
esac

_help=$(printHelp 2>/dev/null)
_download=$(echo "$_help" | sed -n '/^Download:/,$p' | sed -n '2,/^\s*$/p' | sed 's/^ *//g')
if [ -n "$_download" ];then
    [ -n "$table_downloads" ] && table_downloads+=$'\n'
    table_downloads+="$_download"
fi
export RCM_TABLE_DOWNLOADS="$table_downloads"

chapter Execute:

case "$rcm_operand" in
    *)
        words_array=(rcm${isfast}${isnoninteractive}${isverbose} $rcm_operand:$print_version -- "$@")
        wordWrapCommand
        ____

        INDENT+="$RCM_INDENT" BINARY_DIRECTORY="$BINARY_DIRECTORY" rcm${isfast}${isnoninteractive}${isverbose} $rcm_operand:$print_version -- "$@"
        ;;
esac
____

exit 0

# parse-options.sh \
# --compact \
# --clean \
# --no-hash-bang \
# --no-original-arguments \
# --no-error-invalid-options \
# --no-error-require-arguments << EOF | clip
# INCREMENT=(
    # '--verbose|-v'
# )
# FLAG=(
# --fast
# --version
# --help
# --non-interactive
# )
# VALUE=(
# --mode
# )
# MULTIVALUE=(
# )
# FLAG_VALUE=(
# )
# EOF
# clear
